// ### Output Modes With Non Aggregate Queries ###

// #### KAFKA ####

//Create topic in Kafka
// kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic last_topic

//Listen to topic
// kafka-console-consumer --bootstrap-server ip-172-31-41-26.ec2.internal:9092 --topic first_topic

################

spark-shell --master yarn --packages org.apache.spark:spark-sql-kafka-0-10_2.11:2.3.0

import org.apache.spark.sql._
import org.apache.spark.sql.types._ 

val userSchema = new StructType()
 .add("todttm", "string")
 .add("company", "string")
 .add("gate", "string")

val iot = spark.readStream.format("json")
 .schema(userSchema)
 .option("path", "hdfs:///user/home/training").load()

val iot_key_val = iot.withColumn("key", lit(100))
 .select(col("key").cast("string"), concat(col("todttm"), lit("  "), col("company"), lit(" "), col("gate")).alias("value"))

//Non aggregate queries - append mode (0 файлов, добавим 2, состояние уже сохраненных записей корректно)
 
val stream = iot_key_val.writeStream
 .format("kafka")
 .option("kafka.bootstrap.servers", "ip-172-31-41-26.ec2.internal:9092")
 .option("topic", "last_topic")
 .option("checkpointLocation", "hdfs://ip-172-31-40-242.ec2.internal:8020/user/home/stream/chkpt")
 .outputMode("append")
 .start()


//Non aggregate queries - update mode (1 файл, добавим 2й, состояние уже сохраненных записей корректно)

val stream = iot_key_val.writeStream
 .format("kafka")
 .option("kafka.bootstrap.servers", "ip-172-31-41-26.ec2.internal:9092")
 .option("topic", "last_topic")
 .option("checkpointLocation", "hdfs://ip-172-31-40-242.ec2.internal:8020/user/home/stream/chkpt")
 .outputMode("update")
 .start()
 
//Non aggregate queries - complete mode

val stream = iot_key_val.writeStream
 .format("kafka")
 .option("kafka.bootstrap.servers", "ip-172-31-41-26.ec2.internal:9092")
 .option("topic", "last_topic")
 .option("checkpointLocation", "hdfs://ip-172-31-40-242.ec2.internal:8020/user/home/stream/chkpt")
 .outputMode("complete")
 .start()